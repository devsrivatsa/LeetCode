Problem Statement:

You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.

For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.
You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.

Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.

########################################### BFS Solution #################################################################################
Why BFS ? => For an undirected graph, BFS will find the shortest path between source and destination

from collections import deque

class Solution:
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        adj = dict()
        #1. creating an adjecency list of {route: [buses]}
        for i, route_list in enumerate(routes):
            for station in route_list:
                if station not in adj:
                    adj[station] = []
                adj[station].append(i)
        
        visited_buses = set()
        #queue has current_stop, num_buses_taken
        queue = deque([[source, 0]])
        
        while len(queue) > 0:
            station, buses_taken = queue.popleft()
            if station == target:
                return buses_taken
            if station in adj:
                for bus in adj[station]:
                    if bus not in visited_buses:
                        visited_buses.add(bus)
                        for s in routes[bus]:
                            queue.append([s, buses_taken+1])
        return -1
