#Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.
#A leaf is a node with no children.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right



class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        def calPathSum(s, root):
            #what happens when there is no node
            if not root:
                return False
                
            #if in middle, just keep adding
            s += root.val
            
            #if leaf node is reached, check sum
            if not root.left and not root.right:
                return s == targetSum
                
            return calPathSum(s, root.left) or calPathSum(s, root.right)
        
        return calPathSum(0, root)
