Problem Statement:

You are given a 2-D matrix grid. Each cell can have one of three possible values:

0 representing an empty cell
1 representing a fresh fruit
2 representing a rotten fruit
Every minute, if a fresh fruit is horizontally or vertically adjacent to a rotten fruit, then the fresh fruit also becomes rotten.

Return the minimum number of minutes that must elapse until there are zero fresh fruits remaining. If this state is impossible within the grid, return -1.

########################################################### BFS ##########################################################################################

from collections import deque
def min_minutes_to_rot(grid):
  q = deque()
  time, fresh = 0,0
  directions = [(0,1),(0,-1),(1,0),(-1,0)]
  
  for r in range(len(grid)):
    for c in range(len(grid[0])):
      if grid[r][c] == 1:
        fresh += 1
      if grid[r][c] == 2:
        q.append((r,c))
  
  while q and fresh > 0:
    current_rotten_spots = len(q)

    #at any time, there could be multiple rotten orages rotting the one next to themselves. We want to account for all of them in a single time step
    for _ in range(current_rotten_spots):
      r, c = q.popleft()
      
      for dr,dc in directions:
        row, col = r + dr, c + dc
        if (
          row in range(len(grid)) #row is out of bounds and
          and col in range(len(grid[0])) #col is out of bounds and
          and grid[row][col] == 1 #if this is not a good orange, then we skip
        ):
          grid[row][col] = 2 #the orange gets rotten
          fresh -= 1 #the fresh count goes down
          q.append((row, col)) #we add the position for iterations in next time step
    time += 1 #once all the rotten oranges in current queue spred their influence, we increment time step 
  
  #if there are still fresh oranges return time else -1
  return time if fresh == 0 else -1
