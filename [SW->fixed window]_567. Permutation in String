class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s2) < len(s1):
            return False
        l,r = 0, len(s1)
        hm1, hm2 = collections.Counter(s1), collections.Counter(s2[:len(s1)])
        while r < len(s2):
            if hm1 == hm2: return True
            hm2[s2[l]] -= 1
            hm2[s2[r]] = hm2.get(s2[r], 0) + 1
            l+=1
            r+=1
        return hm1 == hm2

############################## If you dont want hashmaps (but sortng might add some extra work to time complexity) #########################
class Solution:
    def checkInclusion(self, s1:str, s2:str) -> bool:
        l, r = 0, len(s1)
        s1 = sorted([c for c in s1])
        while r <= len(s2):
            print(s2[l:r])
            if sorted([c for c in s2[l:r]]) == s1:
                return True       
            l += 1
            r += 1
        return False

############################## Rust ##############################################
use std::collections::HashMap;

impl Solution {
    pub fn check_inclusion(s1: String, s2: String) -> bool {
        if s1.len() > s2.len() { return false }
        let mut l:usize = 0;
        let mut r = s1.len();
        let mut s2vec: Vec<char> = s2.chars().collect();
        let mut hm1 = HashMap::new();
        let mut hm2 = HashMap::new();
        
        for i in s2vec[0..r].iter() { *hm2.entry(i.clone()).or_insert(0) += 1; }
        for i in s1.chars() { *hm1.entry(i.clone()).or_insert(0) += 1; }
        while r < s2vec.len() {
            if hm2 == hm1 { return true }
            
            //update window
            hm2.entry(s2vec[l].clone()).and_modify(|c| *c-=1);
            if hm2[&s2vec[l]] == 0 { hm2.remove(&s2vec[l]); }
            hm2.entry(s2vec[r].clone()).and_modify(|c| *c+=1 ).or_insert(1);
            l+=1;
            r+=1;
        }
        hm2 == hm1 
    }
}

