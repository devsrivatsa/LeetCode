class Solution:
    def totalFruit(self, fruits: List[int]) -> int:
        l,r, max_win = 0,0,0
        basket = dict()
        while r < len(fruits):
            basket[fruits[r]] = basket.get(fruits[r], 0) + 1
            while len(basket) > 2:
                basket[fruits[l]] -= 1 
                if basket[fruits[l]] == 0:
                    del basket[fruits[l]]
                l += 1
            max_win = max(max_win, r-l+1)
            r += 1
        return max_win

################################## Rust ############################

use std::collections::HashMap;
use std::cmp;

impl Solution {
    pub fn total_fruit(fruits: Vec<i32>) -> i32 {
        let (mut l, mut r, mut max_win_size):(usize, usize, i32) = (0,0,0);
        let mut basket:HashMap<i32, i32> = HashMap::new();
        while r < fruits.len() {
            *basket.entry(fruits[r]).or_insert(0) += 1;
            //because we only have 2 baskets
            while basket.len() > 2 {
                basket.entry(fruits[l]).and_modify(|count| *count -= 1);
                if basket[&fruits[l]] == 0 { basket.remove(&fruits[l]); }
                l += 1
            }
            max_win_size = cmp::max(max_win_size, (r-l) as i32 + 1);
            r += 1;
        }
        return max_win_size
    }
}

        
