class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        if len(s) == 1: 
            return 1
        l,r = 0,0
        hm = dict()
        max_win = 0
        while r < len(s):
            hm[s[r]] = hm.get(s[r], 0) + 1
            win_size = sum(hm.values())
            thresh = win_size - max(hm.values())
            if thresh > k:
                #descrease window from left
                hm[s[l]] -= 1
                l += 1
            max_win = max(max_win, r-l+1)
            r += 1
        return max_win

##################################################### Rust ###########################################################

use std::cmp;
use std::collections::{HashMap, HashSet};

impl Solution {
    pub fn character_replacement(s: String, k: i32) -> i32 {
        if s.len() == 1 { return 1 }
        let sv:Vec<char> = s.chars().collect();
        let (mut l, mut r, mut most_freq_char_count, mut max_win_size) = (0usize, 0usize, 0i32, 0usize);
        let mut most_freq_char:char = sv[l].clone();
        let mut hm:HashMap<char, i32> = HashMap::new();
        while r < s.len() {
            //expand window
            *hm.entry(sv[r].clone()).or_insert(0) += 1;
            
            //condition 1: check if the current char is the most_freq one
            if hm[&sv[r]] > most_freq_char_count { 
                most_freq_char_count = hm[&sv[r]];
                most_freq_char = sv[r].clone();
            }

            //condition 2: check if the max replacable characters in the current window is exceeding the allowed value = k
            if ((r-l) as i32 + 1) - most_freq_char_count > k {
            //reduce the window size
                //1. adjust hm
                hm.entry(sv[l].clone()).and_modify(|count| *count -= 1);
                //2. adjust most_freq_char_count
                if sv[l].clone() == most_freq_char { most_freq_char_count -= 1; }
                //3. adjust window
                l += 1;
            }
            //calculate current window size and expand
            max_win_size = cmp::max(max_win_size, r-l+ 1);
            r += 1;
            // println!("max win size {}", max_win_size);
        }
        return max_win_size as i32
    }
}

############### A bit more optimized - (avoid searching dictionary for max frequent character and count)##############        

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        if len(s) == 1: 
            return 1
        l,r = 0,0
        hm = dict()
        max_win = 0
        maxfreq, maxfreqc = 0, s[0] #keeping track of the most freq character and freequency
        while r < len(s):
            hm[s[r]] = hm.get(s[r], 0) + 1
            if hm[s[r]] > maxfreq: #keeping track of the most freq character and freequency
                maxfreq = hm[s[r]]
                maxfreqc = s[r]
            if (r-l+1 - maxfreq) > k: #(r-l+1 - maxfreq) is the threshold
                #descrease window from left
                hm[s[l]] -= 1
                if s[l] == maxfreqc: #keeping track of the most freq character and freequency
                    maxfreq -= 1
                l += 1
            max_win = max(max_win, r-l+1)
            r += 1
        return max_win
