class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        min_win = float("inf")
        curr_sum,l,r = 0,0,0
        while r < len(nums):
            curr_sum += nums[r]
            while curr_sum >= target:
                min_win = min(min_win, r-l+1)
                curr_sum -= nums[l]
                l+=1
            r+=1
        return 0 if min_win == float("inf") else min_win


############################## Golang ############################################
import "math"
func minSubArrayLen(target int, nums []int) int {
    minWin:= math.MaxInt32
    var l,r, currSum int = 0,0,0
    for r < len(nums) {
        currSum += nums[r]
        for currSum >= target {
            if minWin > r-l+1 { minWin = r-l+1 }
            currSum -= nums[l]
            l += 1
        }
        r += 1
    }
    if minWin == math.MaxInt32 { return 0 } else { return minWin } 
}

############################## Rust ##############################################
use std::cmp;
impl Solution {
    pub fn min_sub_array_len(target: i32, nums: Vec<i32>) -> i32 {
        let mut min_win = std::i32::MAX;
        let (mut curr_sum, mut l, mut r):(i32,usize,usize) = (0, 0, 0);
        while r < nums.len() {
            curr_sum += &nums[r];
            while curr_sum >= target {
                min_win = cmp::min(min_win, (r-l) as i32 + 1);
                curr_sum -= &nums[l];
                l+=1;
            }
            r+=1;
        }
        if min_win == std::i32::MAX { return 0 } else { return min_win }
    }
}
