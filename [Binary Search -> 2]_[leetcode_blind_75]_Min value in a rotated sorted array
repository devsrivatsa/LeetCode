class Solution:
    def findMin(self, nums: List[int]) -> int:
        if len(nums)<=3:
            return min(nums)
        if nums[-1] < nums[-2]:
            return nums[-1]
        left=0
        right=len(nums)-1
        if nums[left] < nums[right]:
            return nums[0]
        
        while left <= right:
            mid = (left+right)//2
            # if the mid element is greater than its next element then mid+1 element is the smallest
            # This point would be the point of change. From higher to lower value.
            if nums[mid] > nums[mid+1]:
                return nums[mid+1]
            # if the mid element is lesser than its previous element then mid element is the smallest
            if nums[mid] < nums[mid-1]:
                return nums[mid]
            # if the mid elements value is greater than the 0th element this means
            # the least value is still somewhere to the right as we are still dealing with elements greater than nums[0]
            if nums[mid] > nums[0]:
                left = mid + 1
            # if nums[0] is greater than the mid value then this means the smallest value is somewhere to the left
            else:
                right=mid-1
#############################################################################################################################

class Solution:
    def findMin(self, nums:List[int]) -> int:
        min_val = 2000 #this is based on the constraint
        l, r = 0, len(nums)-1
        while l <= r:
            #if we are on sorted portion, then we just have to look at the nums[l] for lowest value
            if nums[l] < nums[r]:
                min_val = min(min_val, nums[l]
                break
            m = (l + r) // 2
            min_val = min(min_val, nums[m])
            if nums[m] >= nums[l}:#m is on left sorted array: values to left of m are lower but since the array is rotated, the lowest values can be in other side. Hence we search right
                l = m + 1 #search right side as 
            else: # m in on right sorted array. Any value to right of m is greater than m. So we search left side of m.
                r = m - 1 #search left side of array
        return min_elm
