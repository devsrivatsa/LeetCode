class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        def dfs(root):
            if root is None: return [True, 0]

            #first go to the leftmost and rightmost nodes and check if they are balanced
            left, right = dfs(root.left), dfs(root.right)
            
            # the tree is hight balanced if the left and right subtrees are balanced, and if the root is balanced
            balanced = (left[0] and right[0] and abs(left[1] - right[1]) <= 1)
            
            #with each return if the whole tree is balanced, and the height of the tree so that we can calculate the balance for parent
            return [balanced, 1 + max(left[1], right[1])]
        
        return dfs(root)[0]

                
############################################################### Rust #######################################################################

use std::rc::Rc;
use std::cell::RefCell;
use std::cmp;
impl Solution {
    pub fn is_balanced(root: Option<Rc<RefCell<TreeNode>>>) -> bool {
        fn dfs(root:Option<Rc<RefCell<TreeNode>>>) -> (bool, i32) {
            if let Some(node) = root {
                let left = dfs(Rc::clone(&node).borrow().left.clone());
                let right = dfs(Rc::clone(&node).borrow().right.clone());
                let balanced = left.0 && right.0 && (left.1-right.1).abs() <= 1;

                (balanced, 1 + cmp::max(left.1, right.1))
            } else {
                (true, 0i32)
            }
        }
        dfs(root).0
    }
}
