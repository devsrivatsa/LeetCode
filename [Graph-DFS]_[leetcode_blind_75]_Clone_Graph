"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        otn = dict()
        def dfs(node):
            if not node:
                return
            if node in otn:
                return otn[node]
            
            copy = Node(node.val)
            otn[node] = copy
            for nei in node.neighbors:
                #at this point dfs just returns the copy of the node.
                #so we clone all neighbors of node, and attach them to the copy's neighbors list.
                copy.neighbors.append(dfs(nei))
            return copy
        
        return dfs(node)
