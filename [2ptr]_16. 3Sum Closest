import math
class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        #edge case
        if len(nums) == 3:
            return sum(nums)
        nums.sort()
        closest_sum = float("inf")
        min_diff = float("inf")
        for i,a in enumerate(nums):
            l,r = i+1, len(nums)-1
            while l < r:
                s = a + nums[l] + nums[r]
                if min_diff > abs(target - s):
                    min_diff = abs(target - s)
                    closest_sum = s
                # print(a, nums[l], nums[r])
                if s == target:
                    return s
                elif s > target:
                    r -= 1
                elif s < target:
                    l += 1
        return closest_sum


########################## Rust #######################################

use std::cmp;

impl Solution {
    pub fn three_sum_closest(nums: Vec<i32>, target: i32) -> i32 {
        //edge case
        if nums.len() == 3 { return nums.iter().sum() }
        //regular case
        let mut nums = nums.clone();
        nums.sort();
        let mut closest_sum = i32::MAX;
        let mut min_diff = i32::MAX;
        for i in 0..nums.len() {
            let (mut l, mut r):(usize, usize) = (i+1, nums.len()-1);
            while l < r {
                let mut s = nums[i] + nums[l] + nums[r];
                if min_diff > (target - s).abs() {
                    min_diff = (target - s).abs();
                    closest_sum = s;
                }
                if s == target { return s }
                else if s > target { r -= 1 }
                else { l += 1 }

            }
        }
        closest_sum
    }
}
