class Solution:
    def longestNiceSubstring(self, s: str) -> str:
        if len(s) < 2:
            return ""
        hs = set(s)
        for i in range(len(s)):
            if (s[i].lower() in hs) and (s[i].upper() in hs):
                continue
            else:
                #the currrent char s[i] will not be part of solution because it does not have its uppercase or lowercase version in the string.
                #hence we skip that char and look in previous and next part of the string 
                prev = self.longestNiceSubstring(s[:i])
                current = self.longestNiceSubstring(s[i+1:])
                return prev if len(prev) >= len(current) else current
        return s


################################################################ Rust #############################################################################

use std::cmp;
use std::collections::HashSet;
impl Solution {
    pub fn longest_nice_substring(s: String) -> String {
        if s.len() < 2 { return "".to_string() }
        let hs:HashSet<char> = s.chars().collect();
        
        for i in 0..s.len() {
            let l = &s[i..i+1].to_ascii_lowercase().chars().nth(0).unwrap();
            let u = &s[i..i+1].to_ascii_uppercase().chars().nth(0).unwrap();
            if hs.contains(&l) && hs.contains(&u) { continue; }
            else {
                let prev = Solution::longest_nice_substring(s[..i].to_string());
                let curr = Solution::longest_nice_substring(s[i+1..].to_string());
                if prev.len() >= curr.len() { return prev } else { return curr }
            }
        }
        return s.clone()
    }
}
