# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q:
            return True
        if (p and not q) or (q and not p):
            return False
        return p.val == q.val and self.isSameTree(p.right, q.right) and self.isSameTree(p.left, q.left)

################################################ Rudt ##################################################

use std::rc::Rc;
use std::cell::RefCell;
impl Solution {
    pub fn is_same_tree(p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> bool {
        if p.is_none() && q.is_none() { return true }
        if (p.is_none() && q.is_some()) || (p.is_some() && q.is_some()) { return false }
        return (p.clone().unwrap() == q.clone().unwrap()) && 
        Solution::is_same_tree(p.clone().unwrap().borrow().left.clone(), q.clone().unwrap().borrow().left.clone()) &&
        Solution::is_same_tree(p.clone().unwrap().borrow().right.clone(), q.clone().unwrap().borrow().right.clone())
    }
}
                
        
        
