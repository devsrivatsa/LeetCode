# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        if k==0:
            return [target.val]
        graph = collections.defaultdict(list)
        q = collections.deque([root])
        while q:
            node = q.popleft()
            if node.left:
                #bfs - adding node to queue
                q.append(node.left)
                
                #building graph
                graph[node.val].append(node.left.val)
                graph[node.left.val].append(node.val)
            
            if node.right:
                #bfs - adding node to queue
                q.append(node.right)

                #building graph
                graph[node.val].append(node.right.val)
                graph[node.right.val].append(node.val)
        
        #Now we want to explore the graph and find elements that are at distance k from target via bfs on the graph
        visited = set([target.val]) #to keep track of visited nodes
        q = deque([(target.val, 0)]) #for bfs on graph (node_val, distance)
        res = [] #to store final result
        while q:
            node, dist = q.popleft()
            if dist == k: #if this is at k distance
                res.append(node)
            else: #we havent explored this path fully yet
                for edge in graph[node]:
                    if edge not in visited:
                        visited.add(edge) #add node to visited
                        q.append((edge, dist+1)) #therefore this node is at a distance dist+1 from target(or starting node - for generalization)

        return res



