class Solution:
    def maxArea(self, height: List[int]) -> int:
        #edge case
        if len(height) == 2:
            return min(height)
        #regular case
        l=0
        r=len(height)-1
        best_area=0
        while l < r:
            curr_area = min(height[l], height[r]) * (r-l)
            if curr_area > best_area:
                best_area = curr_area
                
            if height[l] < height[r]:
                l += 1
            else:
                r -= 1
        return best_area


############################# Rust ###################################

use std::cmp;

impl Solution {
    pub fn max_area(height: Vec<i32>) -> i32 {
        if height.len() == 2 { return *height.iter().min().unwrap() } //width would just be 1
        let (mut l, mut r):(usize, usize) =  (0, height.len()-1);
        let mut best_area = 0;
        while l < r {
            let curr_area = cmp::min(height[l], height[r])*(r-l) as i32;
            best_area = cmp::max(curr_area, best_area);
            if height[l] < height[r] {
                l += 1;
            } else {
                r -= 1;
            }            
        }
        best_area
    }
}

##########################################################################
Solution summary
- Initialize two pointers, start and end, at the beginning and end of the input array, respectively.

- Iterate through the array until the pointers converge.

- In each iteration, perform the following steps:

    - Calculate the distance, width, between the two vertical lines pointed by the start and end pointers.

    - Multiply the height of the shorter vertical line with the width to calculate the area. Also, update the value of the maximum area.

    - Move the pointer pointing to the shorter vertical line inward by one step.

- After iterating through the array, return the maximum area calculated.
##########################################################################
Time complexity: The time complexity of this solution is O(n), where n is the length of the input array since we have visited the elements of the input array only once.
##########################################################################
Space complexity: The space complexity of this solution is O(1), since we have only used constant space.
##########################################################################
