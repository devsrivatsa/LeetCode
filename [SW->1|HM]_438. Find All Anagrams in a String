from collections import Counter
class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        #edge cases
        if len(p) > len(s):
            return []
        if len(p) == len(s):
            if Counter(p) == Counter(s):
                return [0]
            else:
                return []
        #common case
        l, r = 0,len(p)
        res = []
        hm1, hm2 = dict(Counter(p)), dict(Counter(s[l:r]))
        while r <= len(s):
            if hm1 == hm2: 
                res.append(l)
            if r == len(s): #this line is needed as the string indexing will overflow when r = len(s), but it is needed to include the last window in the result
                break
            #moving the fixed size window
            hm2[s[l]] -= 1
            hm2[s[r]] = hm2.get(s[r], 0) + 1                
            if hm2[s[l]] == 0:
                del hm2[s[l]]
            l += 1
            r += 1
        return res
############################## GOlang ###################################



############################## Rust #####################################
use std::collections::HashMap;

impl Solution {
    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {
        
        //edge case 1
        if p.len() > s.len() { return vec![] }
        
        let mut res:Vec<i32> = Vec::new();
        let mut p_hm:HashMap<char, usize> = HashMap::new();
        let mut win_hm:HashMap<char, usize> = HashMap::new();
        let mut sv:Vec<char> = s.chars().collect();
        let mut l:usize = 0;
        let mut r:usize = p.len();

        for ch in sv[0..p.len() as usize].iter() {
            *win_hm.entry(ch.clone()).or_insert(0) += 1; // and_modify() can also be used
        }
        for ch in p.chars() {
            *p_hm.entry(ch.clone()).or_insert(0) += 1;
        }
        //edge case 2
        if p.len() == s.len() {
            if  p_hm == win_hm {
                return vec![0]
            } else {
                return vec![]
            }
        }

        while r <= s.len() {
            if p_hm == win_hm {
                res.push(l.clone() as i32);
            }
            //this line is needed as the string indexing will overflow when r = len(s), but it is needed to include the last window in the result
            if r == s.len() {
                break
            }
            //moving the window
            win_hm.entry(sv[l].clone()).and_modify(|count| *count-=1); //we just want to modify the count
            if win_hm[&sv[l]] == 0 {
                win_hm.remove(&sv[l]);
            }
            win_hm.entry(sv[r].clone()).and_modify(|count| *count+=1).or_insert(1); //if count exists, then modify, else insert 1 (alt to *hm_win.entry(&s[r].to_owned()).or_insert(0) += 1)
            l += 1;
            r += 1;
        }
        res
    }
}
